C++에서 배열 전체를 특정 값으로 초기화시킬때 효율적으로 하는 방법

int a[21];
int b[21][21];
// 1. memset(cstring헤더에 존재)(하지만 0이나 -1이 아닌 값을 넣으면 오동작하거나, 2차원이상의 배열에서 오류 발생 가능)
memset(a, 0, sizeof a);
memset(b, 0, sizeof b);

//2. for문
for(int i = 0; i < 21; i++)
    a[i] = 0;

for(int i = 0; i < 21; i++)
    for(int j = 0; j <21; j++)
        b[i][j] = 0;

// 3. fill(algorithm헤더에 존재)
fill(a, a+21, 0);

for(int i = 0; i < 21; i++){
    fill(b[i], b[i]+21, 0);
}

===================================================

STL Vector
선언
1. vector<자료형> 이름(length, 값); // 모든 index에 값 저장
2. vector<자료형> 이름(length); // 값들은 기본적으로 0
3. vector<자료형> 이름 = {val_1, val_2, val_3, ... , val_n};
4. vector<자료형> 이름; // 크기가 0인 벡터 선언

메소드
1. 이름.size(); // 벡터의 크기
2. 이름.push_back(값); // 벡터의 제일 마지막에 값 저장 / O(1)
3. 이름.pop_back(); // 벡터의 제일 마지막 값 삭제 / O(1)
4. 이름.insert(위치) // 위치에 값 끼워넣기 / O(N)
5. 이름.erase(위치) // 위치의 값 삭제 / O(N)
6. 이름.clear() // 벡터 비우기
7. 이름.begin() // 벡터 시작점의 위치 / STL lterator 개념 공부

===================================================

range-base for loop (C++11부터 사용 가능)(삼성SW역량테스트에서만 불가)

int e를 사용하면, v1의 값을 복사해서 e에 사용하는것
int& e를 사용하면, 참조자이기에 v1의 원본이 들어감
참조자를 사용했을때, e의 값을 변경하면 v1에서도 값이 변하기에 주의

vector<int> v1 = {1, 2, 3, 4, 5, 6};
for(int e : v1){
    식1
    식2
    .
    .
    식N
}

===================================================

Vector의 모든 원소들을 순회하려할때
Vector말고도 map, list, 배열 모두에서 활용가능하니 잘 기억

1. range-base for loop
for(int e : v1){
    cout << e << ' '; // printf("%d ", e);
}

2. not bad
for(int i = 0; i < v1.size(); i++){
    cout << v1[i] << ' ';
}

3. WRONG(절대금물)
for(int i = 0; i <= v1.size()-1; i++){
    cout << v1[i] << ' ';
}

3번이 잘못 된 이유
vector의 size 메소드는 unsigned int를 반환
(시스템에 따라 unsigned long long을 반환하기도 함)
따라서 0일때 -1하게 되면, 오버플로우로 최대값으로 변해버림 